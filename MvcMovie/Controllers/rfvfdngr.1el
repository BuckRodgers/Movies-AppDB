using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using MvcMovie.Models;

namespace MvcMovie.Controllers
{
    public class MoviesController : Controller
    {
        private MovieDBContext db = new MovieDBContext();

        // GET: /Movies/
        /*public ActionResult Index()
        {
            return View(db.Movies.ToList());
        }*/


        
         //public ActionResult Index(string searchString )

        //NB: {controller}/{action}/{id} so edit is below
        //http://localhost:22403/Movies/Index/ghost
        //public ActionResult Index(string id)

        /*
        //http://localhost:22403/Movies/Index?searchString=ghost
         public ActionResult Index(string searchString )
        {
            //string searchString = id;
            //LINQ (Language intergrated query)
            var movies = from m in db.Movies
                         select m; //SQL query - defined but not run against database

            if (!String.IsNullOrEmpty(searchString))
            {
                movies = movies.Where(s => s.Title.Contains(searchString));
            } //s=> s.title is a lambda expression - method based linqs. 
            // the query is executed in the view, not now.

            return View(movies);
        }
        */

        public ActionResult Index(string movieGenre, string searchString)
         {
             var GenreList = new List<string>();

             var GenQry = from d in db.Movies
                          orderby d.Genre
                          select d.Genre;

             GenreList.AddRange(GenQry.Distinct());
             ViewBag.movieGenre = new SelectList(GenreList);

             var movies = from m in db.Movies
                          select m;

             if (!String.IsNullOrEmpty(searchString))
             {
                 movies = movies.Where(s => s.Title.Contains(searchString));
             }

             if (!string.IsNullOrEmpty(movieGenre))
             {
                 movies = movies.Where(x => x.Genre == movieGenre);
             }

             return View(movies);


         }


        // GET: /Movies/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Movie movie = db.Movies.Find(id);
            if (movie == null)
            {
                return HttpNotFound();
            }
            return View(movie);
        }

        // GET: /Movies/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: /Movies/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        //
        //
        [HttpPost] //attribute restricted to post requests
        [ValidateAntiForgeryToken] //also in view
        public ActionResult Create([Bind(Include="ID,Title,ReleaseDate,Genre,Price,Rating")] Movie movie)
        {
            if (ModelState.IsValid) //the valadation annotations it checks in the model class
            {
                db.Movies.Add(movie);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(movie);
        }

        // GET: /Movies/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Movie movie = db.Movies.Find(id);
            if (movie == null)
            {
                return HttpNotFound();
            }
            return View(movie);
        }

        // POST: /Movies/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include="ID,Title,ReleaseDate,Genre,Price,Rating")] Movie movie)
        {
            if (ModelState.IsValid)
            {
                db.Entry(movie).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(movie);
        }

        // GET: /Movies/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Movie movie = db.Movies.Find(id);
            if (movie == null)
            {
                return HttpNotFound();
            }
            return View(movie);
        }

        //could use this instead.
        //public ActionResult Delete(FormCollection fcNotUsed, int id = 0)
        //not using a delete link due to security holes
        // POST: /Movies/Delete/5
        [HttpPost, ActionName("Delete")] //note- Delete, not DeleteConfirmed. (Changing names may confuse route table
        [ValidateAntiForgeryToken] // POST, and unique signature for security
        public ActionResult DeleteConfirmed(int id)
        {
            Movie movie = db.Movies.Find(id);
            db.Movies.Remove(movie);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        public ActionResult CVSfileAdded(int? whatWhat)
        {
            if (whatWhat == 22) //ToBeSubbedByAppHarbor
            {
                return View();
            }
            else
            {
                return View("~/Views/HelloWorld/Index.cshtml");
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
